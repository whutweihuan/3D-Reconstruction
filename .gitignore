# Created by .ignore support plugin (hsz.mobi)
### JetBrains template
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser

### Python template
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

B.npz
NCCfaster.py
ScreenCamera_2020-10-07-19-44-11.json
ScreenCapture_2020-10-07-19-44-11.png
calibresult-left.png
calibresult-right.png
camera_calibration01.py
camera_calibration02.py
camera_configs.py
camera_strero_cali.py
camera_to_depth.py
depth.png
depth_map.py
depth_to_cloud01.py
depth_to_cloud02.py
depth_to_cloud03.py
depth_to_cloud04.py
dist.py
drawboard.py
epipolar_geometry.py
image/
images/
myvenv/Include/
myvenv/Scripts/Activate.ps1
myvenv/Scripts/activate
myvenv/Scripts/activate.bat
myvenv/Scripts/deactivate.bat
myvenv/Scripts/easy_install-3.6.exe
myvenv/Scripts/easy_install.exe
myvenv/Scripts/f2py.exe
myvenv/Scripts/iptest.exe
myvenv/Scripts/iptest3.exe
myvenv/Scripts/ipython.exe
myvenv/Scripts/ipython3.exe
myvenv/Scripts/jsonschema.exe
myvenv/Scripts/jupyter-bundlerextension.exe
myvenv/Scripts/jupyter-kernel.exe
myvenv/Scripts/jupyter-kernelspec.exe
myvenv/Scripts/jupyter-migrate.exe
myvenv/Scripts/jupyter-nbconvert.exe
myvenv/Scripts/jupyter-nbextension.exe
myvenv/Scripts/jupyter-notebook.exe
myvenv/Scripts/jupyter-run.exe
myvenv/Scripts/jupyter-serverextension.exe
myvenv/Scripts/jupyter-troubleshoot.exe
myvenv/Scripts/jupyter-trust.exe
myvenv/Scripts/jupyter.exe
myvenv/Scripts/pip.exe
myvenv/Scripts/pip3.6.exe
myvenv/Scripts/pip3.exe
myvenv/Scripts/pygmentize.exe
myvenv/Scripts/python.exe
myvenv/Scripts/python3.dll
myvenv/Scripts/python36.dll
myvenv/Scripts/pythonw.exe
myvenv/Scripts/pywin32_postinstall.py
myvenv/Scripts/pywin32_testall.py
myvenv/Scripts/sqlite3.dll
myvenv/Scripts/tcl86t.dll
myvenv/Scripts/tk86t.dll
myvenv/Scripts/vcruntime140.dll
myvenv/etc/
myvenv/pyvenv.cfg
myvenv/share/
open3d-test.py
out.ply
pc.npy
pc1.ply
pose_estimation.py
shot01.py
shot02.py
snapshot/
stereo_calibration.py
stereo_match.py
stereoconfig.py
test.jpg
